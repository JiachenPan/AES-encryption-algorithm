module aes_round_dec(
// Control signal
round_init,
round_final,
// Round signal
round_key,
round_in,
round_out
);

//==========================================================================
//  I/O Signals
//==========================================================================
// Control signal
input   wire                round_init;
input   wire                round_final;
// Round signal
input   wire        [127:0] round_key;
input   wire        [127:0] round_in;
output  wire        [127:0] round_out;


//==========================================================================
//  Internal Signals
//==========================================================================
wire        [127:0] sb_in;
wire          [7:0] sbi_00,sbi_10,sbi_20,sbi_30;    // sb_in [127:96];
wire          [7:0] sbi_01,sbi_11,sbi_21,sbi_31;    // sb_in [ 95:64];
wire          [7:0] sbi_02,sbi_12,sbi_22,sbi_32;    // sb_in [ 63:32];
wire          [7:0] sbi_03,sbi_13,sbi_23,sbi_33;    // sb_in [ 31: 0];
wire        [127:0] sb_out;
wire          [7:0] sbo_00,sbo_10,sbo_20,sbo_30;    // sb_out[127:96];
wire          [7:0] sbo_01,sbo_11,sbo_21,sbo_31;    // sb_out[ 95:64];
wire          [7:0] sbo_02,sbo_12,sbo_22,sbo_32;    // sb_out[ 63:32];
wire          [7:0] sbo_03,sbo_13,sbo_23,sbo_33;    // sb_out[ 31: 0];

wire        [127:0] sr_in;
wire          [7:0] sri_00,sri_10,sri_20,sri_30;    // sr_in [127:96];
wire          [7:0] sri_01,sri_11,sri_21,sri_31;    // sr_in [ 95:64];
wire          [7:0] sri_02,sri_12,sri_22,sri_32;    // sr_in [ 63:32];
wire          [7:0] sri_03,sri_13,sri_23,sri_33;    // sr_in [ 31: 0];
wire        [127:0] sr_out;
wire          [7:0] sro_00,sro_10,sro_20,sro_30;    // sr_out[127:96];
wire          [7:0] sro_01,sro_11,sro_21,sro_31;    // sr_out[ 95:64];
wire          [7:0] sro_02,sro_12,sro_22,sro_32;    // sr_out[ 63:32];
wire          [7:0] sro_03,sro_13,sro_23,sro_33;    // sr_out[ 31: 0];

wire        [127:0] mc_in;
wire          [7:0] mci_00,mci_10,mci_20,mci_30;    // mc_in [127:96];
wire          [7:0] mci_01,mci_11,mci_21,mci_31;    // mc_in [ 95:64];
wire          [7:0] mci_02,mci_12,mci_22,mci_32;    // mc_in [ 63:32];
wire          [7:0] mci_03,mci_13,mci_23,mci_33;    // mc_in [ 31: 0];
wire        [127:0] mc_out;
wire          [7:0] mco_00,mco_10,mco_20,mco_30;    // mc_out[127:96];
wire          [7:0] mco_01,mco_11,mco_21,mco_31;    // mc_out[ 95:64];
wire          [7:0] mco_02,mco_12,mco_22,mco_32;    // mc_out[ 63:32];
wire          [7:0] mco_03,mco_13,mco_23,mco_33;    // mc_out[ 31: 0];

wire        [127:0] ak_in;
wire        [127:0] ak_out;

//==========================================================================
//  Main Description
//==========================================================================

//--------------------------------------------
//  Round function input control
//--------------------------------------------
assign ak_in     = round_in;
assign mc_in     = ak_out;
assign sr_in     = (round_init )? ak_out   : mc_out;
assign sb_in     = sr_out;
assign round_out = (round_final)? ak_out   : sb_out;


//--------------------------------------------
//  Inv Sub Byte
//--------------------------------------------
assign sbi_00 = sb_in[127:120];
assign sbi_10 = sb_in[119:112];
assign sbi_20 = sb_in[111:104];
assign sbi_30 = sb_in[103: 96];
assign sbi_01 = sb_in[ 95: 88];
assign sbi_11 = sb_in[ 87: 80];
assign sbi_21 = sb_in[ 79: 72];
assign sbi_31 = sb_in[ 71: 64];
assign sbi_02 = sb_in[ 63: 56];
assign sbi_12 = sb_in[ 55: 48];
assign sbi_22 = sb_in[ 47: 40];
assign sbi_32 = sb_in[ 39: 32];
assign sbi_03 = sb_in[ 31: 24];
assign sbi_13 = sb_in[ 23: 16];
assign sbi_23 = sb_in[ 15:  8];
assign sbi_33 = sb_in[  7:  0];

assign sbo_00 = inv_sub(sbi_00);
assign sbo_01 = inv_sub(sbi_01);
assign sbo_02 = inv_sub(sbi_02);
assign sbo_03 = inv_sub(sbi_03);
assign sbo_10 = inv_sub(sbi_10);
assign sbo_11 = inv_sub(sbi_11);
assign sbo_12 = inv_sub(sbi_12);
assign sbo_13 = inv_sub(sbi_13);
assign sbo_20 = inv_sub(sbi_20);
assign sbo_21 = inv_sub(sbi_21);
assign sbo_22 = inv_sub(sbi_22);
assign sbo_23 = inv_sub(sbi_23);
assign sbo_30 = inv_sub(sbi_30);
assign sbo_31 = inv_sub(sbi_31);
assign sbo_32 = inv_sub(sbi_32);
assign sbo_33 = inv_sub(sbi_33);

assign sb_out[127:120] = sbo_00;
assign sb_out[119:112] = sbo_10;
assign sb_out[111:104] = sbo_20;
assign sb_out[103: 96] = sbo_30;
assign sb_out[ 95: 88] = sbo_01;
assign sb_out[ 87: 80] = sbo_11;
assign sb_out[ 79: 72] = sbo_21;
assign sb_out[ 71: 64] = sbo_31;
assign sb_out[ 63: 56] = sbo_02;
assign sb_out[ 55: 48] = sbo_12;
assign sb_out[ 47: 40] = sbo_22;
assign sb_out[ 39: 32] = sbo_32;
assign sb_out[ 31: 24] = sbo_03;
assign sb_out[ 23: 16] = sbo_13;
assign sb_out[ 15:  8] = sbo_23;
assign sb_out[  7:  0] = sbo_33;


//--------------------------------------------
//  Inv Shift Row
//--------------------------------------------
assign sri_00 = sr_in[127:120];
assign sri_10 = sr_in[119:112];
assign sri_20 = sr_in[111:104];
assign sri_30 = sr_in[103: 96];
assign sri_01 = sr_in[ 95: 88];
assign sri_11 = sr_in[ 87: 80];
assign sri_21 = sr_in[ 79: 72];
assign sri_31 = sr_in[ 71: 64];
assign sri_02 = sr_in[ 63: 56];
assign sri_12 = sr_in[ 55: 48];
assign sri_22 = sr_in[ 47: 40];
assign sri_32 = sr_in[ 39: 32];
assign sri_03 = sr_in[ 31: 24];
assign sri_13 = sr_in[ 23: 16];
assign sri_23 = sr_in[ 15:  8];
assign sri_33 = sr_in[  7:  0];

assign sro_00 = sri_00;
assign sro_10 = sri_13;
assign sro_20 = sri_22;
assign sro_30 = sri_31;
assign sro_01 = sri_01;
assign sro_11 = sri_10;
assign sro_21 = sri_23;
assign sro_31 = sri_32;
assign sro_02 = sri_02;
assign sro_12 = sri_11;
assign sro_22 = sri_20;
assign sro_32 = sri_33;
assign sro_03 = sri_03;
assign sro_13 = sri_12;
assign sro_23 = sri_21;
assign sro_33 = sri_30;

assign sr_out[127:120] = sro_00;
assign sr_out[119:112] = sro_10;
assign sr_out[111:104] = sro_20;
assign sr_out[103: 96] = sro_30;
assign sr_out[ 95: 88] = sro_01;
assign sr_out[ 87: 80] = sro_11;
assign sr_out[ 79: 72] = sro_21;
assign sr_out[ 71: 64] = sro_31;
assign sr_out[ 63: 56] = sro_02;
assign sr_out[ 55: 48] = sro_12;
assign sr_out[ 47: 40] = sro_22;
assign sr_out[ 39: 32] = sro_32;
assign sr_out[ 31: 24] = sro_03;
assign sr_out[ 23: 16] = sro_13;
assign sr_out[ 15:  8] = sro_23;
assign sr_out[  7:  0] = sro_33;


//--------------------------------------------
//  Inv Mix Column
//--------------------------------------------
assign mci_00 = mc_in[127:120];
assign mci_10 = mc_in[119:112];
assign mci_20 = mc_in[111:104];
assign mci_30 = mc_in[103: 96];
assign mci_01 = mc_in[ 95: 88];
assign mci_11 = mc_in[ 87: 80];
assign mci_21 = mc_in[ 79: 72];
assign mci_31 = mc_in[ 71: 64];
assign mci_02 = mc_in[ 63: 56];
assign mci_12 = mc_in[ 55: 48];
assign mci_22 = mc_in[ 47: 40];
assign mci_32 = mc_in[ 39: 32];
assign mci_03 = mc_in[ 31: 24];
assign mci_13 = mc_in[ 23: 16];
assign mci_23 = mc_in[ 15:  8];
assign mci_33 = mc_in[  7:  0];

assign mco_00 = xte(mci_00) ^ xtb(mci_10) ^ xtd(mci_20) ^ xt9(mci_30);
assign mco_10 = xt9(mci_00) ^ xte(mci_10) ^ xtb(mci_20) ^ xtd(mci_30);
assign mco_20 = xtd(mci_00) ^ xt9(mci_10) ^ xte(mci_20) ^ xtb(mci_30);
assign mco_30 = xtb(mci_00) ^ xtd(mci_10) ^ xt9(mci_20) ^ xte(mci_30);
assign mco_01 = xte(mci_01) ^ xtb(mci_11) ^ xtd(mci_21) ^ xt9(mci_31);
assign mco_11 = xt9(mci_01) ^ xte(mci_11) ^ xtb(mci_21) ^ xtd(mci_31);
assign mco_21 = xtd(mci_01) ^ xt9(mci_11) ^ xte(mci_21) ^ xtb(mci_31);
assign mco_31 = xtb(mci_01) ^ xtd(mci_11) ^ xt9(mci_21) ^ xte(mci_31);
assign mco_02 = xte(mci_02) ^ xtb(mci_12) ^ xtd(mci_22) ^ xt9(mci_32);
assign mco_12 = xt9(mci_02) ^ xte(mci_12) ^ xtb(mci_22) ^ xtd(mci_32);
assign mco_22 = xtd(mci_02) ^ xt9(mci_12) ^ xte(mci_22) ^ xtb(mci_32);
assign mco_32 = xtb(mci_02) ^ xtd(mci_12) ^ xt9(mci_22) ^ xte(mci_32);
assign mco_03 = xte(mci_03) ^ xtb(mci_13) ^ xtd(mci_23) ^ xt9(mci_33);
assign mco_13 = xt9(mci_03) ^ xte(mci_13) ^ xtb(mci_23) ^ xtd(mci_33);
assign mco_23 = xtd(mci_03) ^ xt9(mci_13) ^ xte(mci_23) ^ xtb(mci_33);
assign mco_33 = xtb(mci_03) ^ xtd(mci_13) ^ xt9(mci_23) ^ xte(mci_33);

assign mc_out[127:120] = mco_00;
assign mc_out[119:112] = mco_10;
assign mc_out[111:104] = mco_20;
assign mc_out[103: 96] = mco_30;
assign mc_out[ 95: 88] = mco_01;
assign mc_out[ 87: 80] = mco_11;
assign mc_out[ 79: 72] = mco_21;
assign mc_out[ 71: 64] = mco_31;
assign mc_out[ 63: 56] = mco_02;
assign mc_out[ 55: 48] = mco_12;
assign mc_out[ 47: 40] = mco_22;
assign mc_out[ 39: 32] = mco_32;
assign mc_out[ 31: 24] = mco_03;
assign mc_out[ 23: 16] = mco_13;
assign mc_out[ 15:  8] = mco_23;
assign mc_out[  7:  0] = mco_33;


//--------------------------------------------
//  Inv Add Round Key
//--------------------------------------------
assign ak_out = ak_in ^ round_key;


//--------------------------------------------------------------------


//--------------------------------------------
//  Multiplication
//--------------------------------------------
function [7:0] xt9;
    input [7:0] in;
    reg   [7:0] xt2;
    reg   [7:0] xt4;
    reg   [7:0] xt8;
    begin
        xt2 = { in[6:0],1'b0} ^ ({8{ in[7]}} & 8'b0001_1011);
        xt4 = {xt2[6:0],1'b0} ^ ({8{xt2[7]}} & 8'b0001_1011);
        xt8 = {xt4[6:0],1'b0} ^ ({8{xt4[7]}} & 8'b0001_1011);
        xt9 = xt8 ^ in;
    end
endfunction

function [7:0] xtb;
    input [7:0] in;
    reg   [7:0] xt2;
    reg   [7:0] xt4;
    reg   [7:0] xt8;
    begin
        xt2 = { in[6:0],1'b0} ^ ({8{ in[7]}} & 8'b0001_1011);
        xt4 = {xt2[6:0],1'b0} ^ ({8{xt2[7]}} & 8'b0001_1011);
        xt8 = {xt4[6:0],1'b0} ^ ({8{xt4[7]}} & 8'b0001_1011);
        xtb = xt8 ^ xt2 ^ in;
    end
endfunction

function [7:0] xtd;
    input [7:0] in;
    reg   [7:0] xt2;
    reg   [7:0] xt4;
    reg   [7:0] xt8;
    begin
        xt2 = { in[6:0],1'b0} ^ ({8{ in[7]}} & 8'b0001_1011);
        xt4 = {xt2[6:0],1'b0} ^ ({8{xt2[7]}} & 8'b0001_1011);
        xt8 = {xt4[6:0],1'b0} ^ ({8{xt4[7]}} & 8'b0001_1011);
        xtd = xt8 ^ xt4 ^ in;
    end
endfunction

function [7:0] xte;
    input [7:0] in;
    reg   [7:0] xt2;
    reg   [7:0] xt4;
    reg   [7:0] xt8;
    begin
        xt2 = { in[6:0],1'b0} ^ ({8{ in[7]}} & 8'b0001_1011);
        xt4 = {xt2[6:0],1'b0} ^ ({8{xt2[7]}} & 8'b0001_1011);
        xt8 = {xt4[6:0],1'b0} ^ ({8{xt4[7]}} & 8'b0001_1011);
        xte = xt8 ^ xt4 ^ xt2;
    end
endfunction


//--------------------------------------------
//  Inv Sub Byte Table
//--------------------------------------------
function [7:0] inv_sub;
    input [7:0] in;
    begin
        case(in)
            8'h00 : inv_sub = 8'h52;
            8'h01 : inv_sub = 8'h09;
            8'h02 : inv_sub = 8'h6a;
            8'h03 : inv_sub = 8'hd5;
            8'h04 : inv_sub = 8'h30;
            8'h05 : inv_sub = 8'h36;
            8'h06 : inv_sub = 8'ha5;
            8'h07 : inv_sub = 8'h38;
            8'h08 : inv_sub = 8'hbf;
            8'h09 : inv_sub = 8'h40;
            8'h0a : inv_sub = 8'ha3;
            8'h0b : inv_sub = 8'h9e;
            8'h0c : inv_sub = 8'h81;
            8'h0d : inv_sub = 8'hf3;
            8'h0e : inv_sub = 8'hd7;
            8'h0f : inv_sub = 8'hfb;
            8'h10 : inv_sub = 8'h7c;
            8'h11 : inv_sub = 8'he3;
            8'h12 : inv_sub = 8'h39;
            8'h13 : inv_sub = 8'h82;
            8'h14 : inv_sub = 8'h9b;
            8'h15 : inv_sub = 8'h2f;
            8'h16 : inv_sub = 8'hff;
            8'h17 : inv_sub = 8'h87;
            8'h18 : inv_sub = 8'h34;
            8'h19 : inv_sub = 8'h8e;
            8'h1a : inv_sub = 8'h43;
            8'h1b : inv_sub = 8'h44;
            8'h1c : inv_sub = 8'hc4;
            8'h1d : inv_sub = 8'hde;
            8'h1e : inv_sub = 8'he9;
            8'h1f : inv_sub = 8'hcb;
            8'h20 : inv_sub = 8'h54;
            8'h21 : inv_sub = 8'h7b;
            8'h22 : inv_sub = 8'h94;
            8'h23 : inv_sub = 8'h32;
            8'h24 : inv_sub = 8'ha6;
            8'h25 : inv_sub = 8'hc2;
            8'h26 : inv_sub = 8'h23;
            8'h27 : inv_sub = 8'h3d;
            8'h28 : inv_sub = 8'hee;
            8'h29 : inv_sub = 8'h4c;
            8'h2a : inv_sub = 8'h95;
            8'h2b : inv_sub = 8'h0b;
            8'h2c : inv_sub = 8'h42;
            8'h2d : inv_sub = 8'hfa;
            8'h2e : inv_sub = 8'hc3;
            8'h2f : inv_sub = 8'h4e;
            8'h30 : inv_sub = 8'h08;
            8'h31 : inv_sub = 8'h2e;
            8'h32 : inv_sub = 8'ha1;
            8'h33 : inv_sub = 8'h66;
            8'h34 : inv_sub = 8'h28;
            8'h35 : inv_sub = 8'hd9;
            8'h36 : inv_sub = 8'h24;
            8'h37 : inv_sub = 8'hb2;
            8'h38 : inv_sub = 8'h76;
            8'h39 : inv_sub = 8'h5b;
            8'h3a : inv_sub = 8'ha2;
            8'h3b : inv_sub = 8'h49;
            8'h3c : inv_sub = 8'h6d;
            8'h3d : inv_sub = 8'h8b;
            8'h3e : inv_sub = 8'hd1;
            8'h3f : inv_sub = 8'h25;
            8'h40 : inv_sub = 8'h72;
            8'h41 : inv_sub = 8'hf8;
            8'h42 : inv_sub = 8'hf6;
            8'h43 : inv_sub = 8'h64;
            8'h44 : inv_sub = 8'h86;
            8'h45 : inv_sub = 8'h68;
            8'h46 : inv_sub = 8'h98;
            8'h47 : inv_sub = 8'h16;
            8'h48 : inv_sub = 8'hd4;
            8'h49 : inv_sub = 8'ha4;
            8'h4a : inv_sub = 8'h5c;
            8'h4b : inv_sub = 8'hcc;
            8'h4c : inv_sub = 8'h5d;
            8'h4d : inv_sub = 8'h65;
            8'h4e : inv_sub = 8'hb6;
            8'h4f : inv_sub = 8'h92;
            8'h50 : inv_sub = 8'h6c;
            8'h51 : inv_sub = 8'h70;
            8'h52 : inv_sub = 8'h48;
            8'h53 : inv_sub = 8'h50;
            8'h54 : inv_sub = 8'hfd;
            8'h55 : inv_sub = 8'hed;
            8'h56 : inv_sub = 8'hb9;
            8'h57 : inv_sub = 8'hda;
            8'h58 : inv_sub = 8'h5e;
            8'h59 : inv_sub = 8'h15;
            8'h5a : inv_sub = 8'h46;
            8'h5b : inv_sub = 8'h57;
            8'h5c : inv_sub = 8'ha7;
            8'h5d : inv_sub = 8'h8d;
            8'h5e : inv_sub = 8'h9d;
            8'h5f : inv_sub = 8'h84;
            8'h60 : inv_sub = 8'h90;
            8'h61 : inv_sub = 8'hd8;
            8'h62 : inv_sub = 8'hab;
            8'h63 : inv_sub = 8'h00;
            8'h64 : inv_sub = 8'h8c;
            8'h65 : inv_sub = 8'hbc;
            8'h66 : inv_sub = 8'hd3;
            8'h67 : inv_sub = 8'h0a;
            8'h68 : inv_sub = 8'hf7;
            8'h69 : inv_sub = 8'he4;
            8'h6a : inv_sub = 8'h58;
            8'h6b : inv_sub = 8'h05;
            8'h6c : inv_sub = 8'hb8;
            8'h6d : inv_sub = 8'hb3;
            8'h6e : inv_sub = 8'h45;
            8'h6f : inv_sub = 8'h06;
            8'h70 : inv_sub = 8'hd0;
            8'h71 : inv_sub = 8'h2c;
            8'h72 : inv_sub = 8'h1e;
            8'h73 : inv_sub = 8'h8f;
            8'h74 : inv_sub = 8'hca;
            8'h75 : inv_sub = 8'h3f;
            8'h76 : inv_sub = 8'h0f;
            8'h77 : inv_sub = 8'h02;
            8'h78 : inv_sub = 8'hc1;
            8'h79 : inv_sub = 8'haf;
            8'h7a : inv_sub = 8'hbd;
            8'h7b : inv_sub = 8'h03;
            8'h7c : inv_sub = 8'h01;
            8'h7d : inv_sub = 8'h13;
            8'h7e : inv_sub = 8'h8a;
            8'h7f : inv_sub = 8'h6b;
            8'h80 : inv_sub = 8'h3a;
            8'h81 : inv_sub = 8'h91;
            8'h82 : inv_sub = 8'h11;
            8'h83 : inv_sub = 8'h41;
            8'h84 : inv_sub = 8'h4f;
            8'h85 : inv_sub = 8'h67;
            8'h86 : inv_sub = 8'hdc;
            8'h87 : inv_sub = 8'hea;
            8'h88 : inv_sub = 8'h97;
            8'h89 : inv_sub = 8'hf2;
            8'h8a : inv_sub = 8'hcf;
            8'h8b : inv_sub = 8'hce;
            8'h8c : inv_sub = 8'hf0;
            8'h8d : inv_sub = 8'hb4;
            8'h8e : inv_sub = 8'he6;
            8'h8f : inv_sub = 8'h73;
            8'h90 : inv_sub = 8'h96;
            8'h91 : inv_sub = 8'hac;
            8'h92 : inv_sub = 8'h74;
            8'h93 : inv_sub = 8'h22;
            8'h94 : inv_sub = 8'he7;
            8'h95 : inv_sub = 8'had;
            8'h96 : inv_sub = 8'h35;
            8'h97 : inv_sub = 8'h85;
            8'h98 : inv_sub = 8'he2;
            8'h99 : inv_sub = 8'hf9;
            8'h9a : inv_sub = 8'h37;
            8'h9b : inv_sub = 8'he8;
            8'h9c : inv_sub = 8'h1c;
            8'h9d : inv_sub = 8'h75;
            8'h9e : inv_sub = 8'hdf;
            8'h9f : inv_sub = 8'h6e;
            8'ha0 : inv_sub = 8'h47;
            8'ha1 : inv_sub = 8'hf1;
            8'ha2 : inv_sub = 8'h1a;
            8'ha3 : inv_sub = 8'h71;
            8'ha4 : inv_sub = 8'h1d;
            8'ha5 : inv_sub = 8'h29;
            8'ha6 : inv_sub = 8'hc5;
            8'ha7 : inv_sub = 8'h89;
            8'ha8 : inv_sub = 8'h6f;
            8'ha9 : inv_sub = 8'hb7;
            8'haa : inv_sub = 8'h62;
            8'hab : inv_sub = 8'h0e;
            8'hac : inv_sub = 8'haa;
            8'had : inv_sub = 8'h18;
            8'hae : inv_sub = 8'hbe;
            8'haf : inv_sub = 8'h1b;
            8'hb0 : inv_sub = 8'hfc;
            8'hb1 : inv_sub = 8'h56;
            8'hb2 : inv_sub = 8'h3e;
            8'hb3 : inv_sub = 8'h4b;
            8'hb4 : inv_sub = 8'hc6;
            8'hb5 : inv_sub = 8'hd2;
            8'hb6 : inv_sub = 8'h79;
            8'hb7 : inv_sub = 8'h20;
            8'hb8 : inv_sub = 8'h9a;
            8'hb9 : inv_sub = 8'hdb;
            8'hba : inv_sub = 8'hc0;
            8'hbb : inv_sub = 8'hfe;
            8'hbc : inv_sub = 8'h78;
            8'hbd : inv_sub = 8'hcd;
            8'hbe : inv_sub = 8'h5a;
            8'hbf : inv_sub = 8'hf4;
            8'hc0 : inv_sub = 8'h1f;
            8'hc1 : inv_sub = 8'hdd;
            8'hc2 : inv_sub = 8'ha8;
            8'hc3 : inv_sub = 8'h33;
            8'hc4 : inv_sub = 8'h88;
            8'hc5 : inv_sub = 8'h07;
            8'hc6 : inv_sub = 8'hc7;
            8'hc7 : inv_sub = 8'h31;
            8'hc8 : inv_sub = 8'hb1;
            8'hc9 : inv_sub = 8'h12;
            8'hca : inv_sub = 8'h10;
            8'hcb : inv_sub = 8'h59;
            8'hcc : inv_sub = 8'h27;
            8'hcd : inv_sub = 8'h80;
            8'hce : inv_sub = 8'hec;
            8'hcf : inv_sub = 8'h5f;
            8'hd0 : inv_sub = 8'h60;
            8'hd1 : inv_sub = 8'h51;
            8'hd2 : inv_sub = 8'h7f;
            8'hd3 : inv_sub = 8'ha9;
            8'hd4 : inv_sub = 8'h19;
            8'hd5 : inv_sub = 8'hb5;
            8'hd6 : inv_sub = 8'h4a;
            8'hd7 : inv_sub = 8'h0d;
            8'hd8 : inv_sub = 8'h2d;
            8'hd9 : inv_sub = 8'he5;
            8'hda : inv_sub = 8'h7a;
            8'hdb : inv_sub = 8'h9f;
            8'hdc : inv_sub = 8'h93;
            8'hdd : inv_sub = 8'hc9;
            8'hde : inv_sub = 8'h9c;
            8'hdf : inv_sub = 8'hef;
            8'he0 : inv_sub = 8'ha0;
            8'he1 : inv_sub = 8'he0;
            8'he2 : inv_sub = 8'h3b;
            8'he3 : inv_sub = 8'h4d;
            8'he4 : inv_sub = 8'hae;
            8'he5 : inv_sub = 8'h2a;
            8'he6 : inv_sub = 8'hf5;
            8'he7 : inv_sub = 8'hb0;
            8'he8 : inv_sub = 8'hc8;
            8'he9 : inv_sub = 8'heb;
            8'hea : inv_sub = 8'hbb;
            8'heb : inv_sub = 8'h3c;
            8'hec : inv_sub = 8'h83;
            8'hed : inv_sub = 8'h53;
            8'hee : inv_sub = 8'h99;
            8'hef : inv_sub = 8'h61;
            8'hf0 : inv_sub = 8'h17;
            8'hf1 : inv_sub = 8'h2b;
            8'hf2 : inv_sub = 8'h04;
            8'hf3 : inv_sub = 8'h7e;
            8'hf4 : inv_sub = 8'hba;
            8'hf5 : inv_sub = 8'h77;
            8'hf6 : inv_sub = 8'hd6;
            8'hf7 : inv_sub = 8'h26;
            8'hf8 : inv_sub = 8'he1;
            8'hf9 : inv_sub = 8'h69;
            8'hfa : inv_sub = 8'h14;
            8'hfb : inv_sub = 8'h63;
            8'hfc : inv_sub = 8'h55;
            8'hfd : inv_sub = 8'h21;
            8'hfe : inv_sub = 8'h0c;
            8'hff : inv_sub = 8'h7d;
        endcase
    end
endfunction

endmodule
